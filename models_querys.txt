 import_models
    self.models_module = import_module(models_module_name)
  File "/usr/lib/python3.6/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 978, in _gcd_import
  File "<frozen importlib._bootstrap>", line 961, in _find_and_load
  File "<frozen importlib._bootstrap>", line 950, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 655, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 678, in exec_module
  File "<frozen importlib._bootstrap>", line 205, in _call_with_frames_removed
  File "/usr/lib/python3.6/site-packages/django/contrib/auth/models.py", line 2, in <module>
    from django.contrib.auth.base_user import AbstractBaseUser, BaseUserManager
  File "/usr/lib/python3.6/site-packages/django/contrib/auth/base_user.py", line 47, in <module>
    class AbstractBaseUser(models.Model):
  File "/usr/lib/python3.6/site-packages/django/db/models/base.py", line 114, in __new__
    new_class.add_to_class('_meta', Options(meta, app_label))
  File "/usr/lib/python3.6/site-packages/django/db/models/base.py", line 315, in add_to_class
    value.contribute_to_class(cls, name)
  File "/usr/lib/python3.6/site-packages/django/db/models/options.py", line 205, in contribute_to_class
    self.db_table = truncate_name(self.db_table, connection.ops.max_name_length())
  File "/usr/lib/python3.6/site-packages/django/db/__init__.py", line 33, in __getattr__
    return getattr(connections[DEFAULT_DB_ALIAS], item)
  File "/usr/lib/python3.6/site-packages/django/db/utils.py", line 202, in __getitem__
    backend = load_backend(db['ENGINE'])
  File "/usr/lib/python3.6/site-packages/django/db/utils.py", line 110, in load_backend
    return import_module('%s.base' % backend_name)
  File "/usr/lib/python3.6/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "/usr/lib/python3.6/site-packages/django/db/backends/postgresql/base.py", line 24, in <module>
    raise ImproperlyConfigured("Error loading psycopg2 module: %s" % e)
django.core.exceptions.ImproperlyConfigured: Error loading psycopg2 module: No module named 'psycopg2'
[lin777@Evelyn-Arch modelvideo]$ sudo pip install psycopg2
[sudo] password for lin777: 
Requirement already satisfied: psycopg2 in /usr/lib/python3.6/site-packages
[lin777@Evelyn-Arch modelvideo]$ python manage.py migrate 
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, sessions
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying sessions.0001_initial... OK
[lin777@Evelyn-Arch modelvideo]$ python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, sessions
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying sessions.0001_initial... OK
[lin777@Evelyn-Arch modelvideo]$ python manage.py startapp example
[lin777@Evelyn-Arch modelvideo]$ python manage.py makemigrations  
Migrations for 'example':
  example/migrations/0001_initial.py
    - Create model Company
[lin777@Evelyn-Arch modelvideo]$ python manage.py migrate         
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, example, sessions
Running migrations:
  Applying example.0001_initial... OK
[lin777@Evelyn-Arch modelvideo]$ python manage.py shell  
Python 3.6.2 (default, Jul 20 2017, 03:52:27) 
Type 'copyright', 'credits' or 'license' for more information
IPython 6.1.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: from example.models import Company

In [2]: google = Company(name='Google')

In [3]: apple = Company(name='Apple')

In [4]: mocrosoft = Company(name='Microsoft')

In [5]: mocrosoft = Company(name='')

In [6]: microsoft = Company(name='Microsoft')

In [7]: facebook = Company(name='Facebook')

In [8]: google.save()

In [9]: apple.save()

In [10]: microsoft.save()

In [11]: facebook.save()

In [12]: google.name = 'miPusheen'

In [13]: google.save()

In [14]: facebook.delete()
Out[14]: (1, {'example.Company': 1})

In [15]: from example.models import Company

In [16]: apple = Company.objects.get(pk=2)

In [17]: apple
Out[17]: <Company: Company object (2)>

In [18]: apple
Out[18]: <Company: Company object (2)>

In [19]: apple.name = 'APPLE'

In [20]: apple.save()

In [21]: apple
Out[21]: <Company: Company object (2)>

In [22]: exit()
[lin777@Evelyn-Arch modelvideo]$ python manage.py makemigrations
Traceback (most recent call last):
  File "manage.py", line 15, in <module>
    execute_from_command_line(sys.argv)
  File "/usr/lib/python3.6/site-packages/django/core/management/__init__.py", line 371, in execute_from_command_line
    utility.execute()
  File "/usr/lib/python3.6/site-packages/django/core/management/__init__.py", line 347, in execute
    django.setup()
  File "/usr/lib/python3.6/site-packages/django/__init__.py", line 24, in setup
    apps.populate(settings.INSTALLED_APPS)
  File "/usr/lib/python3.6/site-packages/django/apps/registry.py", line 112, in populate
    app_config.import_models()
  File "/usr/lib/python3.6/site-packages/django/apps/config.py", line 198, in import_models
    self.models_module = import_module(models_module_name)
  File "/usr/lib/python3.6/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 978, in _gcd_import
  File "<frozen importlib._bootstrap>", line 961, in _find_and_load
  File "<frozen importlib._bootstrap>", line 950, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 655, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 678, in exec_module
  File "<frozen importlib._bootstrap>", line 205, in _call_with_frames_removed
  File "/home/lin777/practicaDjango/modelvideo/example/models.py", line 10, in <module>
    class Programmer(models.Model):
  File "/home/lin777/practicaDjango/modelvideo/example/models.py", line 12, in Programmer
    company = models.ForeignKey(Company)
TypeError: __init__() missing 1 required positional argument: 'on_delete'
[lin777@Evelyn-Arch modelvideo]$ python manage.py makemigrations
Traceback (most recent call last):
  File "manage.py", line 15, in <module>
    execute_from_command_line(sys.argv)
  File "/usr/lib/python3.6/site-packages/django/core/management/__init__.py", line 371, in execute_from_command_line
    utility.execute()
  File "/usr/lib/python3.6/site-packages/django/core/management/__init__.py", line 347, in execute
    django.setup()
  File "/usr/lib/python3.6/site-packages/django/__init__.py", line 24, in setup
    apps.populate(settings.INSTALLED_APPS)
  File "/usr/lib/python3.6/site-packages/django/apps/registry.py", line 112, in populate
    app_config.import_models()
  File "/usr/lib/python3.6/site-packages/django/apps/config.py", line 198, in import_models
    self.models_module = import_module(models_module_name)
  File "/usr/lib/python3.6/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 978, in _gcd_import
  File "<frozen importlib._bootstrap>", line 961, in _find_and_load
  File "<frozen importlib._bootstrap>", line 950, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 655, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 678, in exec_module
  File "<frozen importlib._bootstrap>", line 205, in _call_with_frames_removed
  File "/home/lin777/practicaDjango/modelvideo/example/models.py", line 10, in <module>
    class Programmer(models.Model):
  File "/home/lin777/practicaDjango/modelvideo/example/models.py", line 12, in Programmer
    company = models.ForeignKey(Company, on_delete=models.CASCADE())
TypeError: CASCADE() missing 4 required positional arguments: 'collector', 'field', 'sub_objs', and 'using'
[lin777@Evelyn-Arch modelvideo]$ python manage.py makemigrations
Migrations for 'example':
  example/migrations/0002_programmer.py
    - Create model Programmer
[lin777@Evelyn-Arch modelvideo]$ python manage.py migrate       
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, example, sessions
Running migrations:
  Applying example.0002_programmer... OK
[lin777@Evelyn-Arch modelvideo]$ python manage.py shell         
Python 3.6.2 (default, Jul 20 2017, 03:52:27) 
Type 'copyright', 'credits' or 'license' for more information
IPython 6.1.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: from example.models import Company, Programmer

In [2]: apple = Company.object.get(pk=2)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-2-c83cccc5a883> in <module>()
----> 1 apple = Company.object.get(pk=2)

AttributeError: type object 'Company' has no attribute 'object'

In [3]: apple = Company.objects.get(pk=2)

In [4]: mipusheen = Company.objects.get(pk=1)

In [5]: microsoft = Company.objects.get(pk=3)

In [6]: microsoft
Out[6]: <Company: Microsoft>

In [7]: ariel = Programer(name='Ariel', company=apple)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-7-db35bb4686c5> in <module>()
----> 1 ariel = Programer(name='Ariel', company=apple)

NameError: name 'Programer' is not defined

In [8]: ariel = Programmer(name='Ariel', company=apple)

In [9]: evelyn = Programmer(name='Evelyn', company=mipusheen)

In [10]: sergio = Programmer(name='Sergio', company=microsoft)

In [11]: anghy = Programmer(name='Anghy', company=microsoft)

In [12]: jorge = Programmer(name='Jorge', company=apple)

In [13]: jhonas = Programmer(name='Jhonathan', company=apple)

In [14]: ariel.save()

In [15]: evelyn.save()

In [16]: sergio.save()

In [17]: anghy.save()

In [18]: jorge.save()

In [19]: jhonas.save()

In [20]: ariel
Out[20]: <Programmer: Ariel>

In [21]: ariel.name
Out[21]: 'Ariel'

In [22]: ariel.company
Out[22]: <Company: APPLE>

In [23]: evelyn.company
Out[23]: <Company: miPusheen>

In [24]: apple.programmer_set
Out[24]: <django.db.models.fields.related_descriptors.create_reverse_many_to_one_manager.<locals>.RelatedManager at 0x7f37b096cb70>

In [25]: apple.programmer_set.all()
Out[25]: <QuerySet [<Programmer: Ariel>, <Programmer: Jorge>, <Programmer: Jhonathan>]>

In [26]: mipusheen.programmer_set.all()
Out[26]: <QuerySet [<Programmer: Evelyn>]>

In [27]: microsoft.programmer_set.all()
Out[27]: <QuerySet [<Programmer: Sergio>, <Programmer: Anghy>]>

In [28]: exit()
[lin777@Evelyn-Arch modelvideo]$ python manage.py makemigrations
Migrations for 'example':
  example/migrations/0003_auto_20180412_1634.py
    - Create model Language
    - Add field languages to programmer
[lin777@Evelyn-Arch modelvideo]$ python manage.py migrate       
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, example, sessions
Running migrations:
  Applying example.0003_auto_20180412_1634... OK
[lin777@Evelyn-Arch modelvideo]$ python manage.py shell         
Python 3.6.2 (default, Jul 20 2017, 03:52:27) 
Type 'copyright', 'credits' or 'license' for more information
IPython 6.1.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: from example.models import Language, Programmer

In [2]: ariel = Programmer.objects.get(pk=1)

In [3]: evelyn = Programmer.objects.get(pk=2)

In [4]: python = Language(name='Python')

In [5]: java = Language(name='Java')

In [6]: ruby = Language(name='Ruby')

In [7]: kotlin = Language(name='Kotlin')

In [8]: python.save()

In [9]: java.save()

In [10]: ruby.save()

In [11]: kotlin.save()

In [12]: ariel.languages.add(java)

In [13]: ariel.languages.add(kotlin)

In [14]: ariel.save()

In [15]: evelyn.languages.add(python)

In [16]: evelyn.languages.add(ruby)

In [17]: evelyn.save()

In [18]: ariel.languages.all()
Out[18]: <QuerySet [<Language: Java>, <Language: Kotlin>]>

In [19]: evelyn.languages.all()
Out[19]: <QuerySet [<Language: Python>, <Language: Ruby>]>

In [20]: ariel.languages.add(python)

In [21]: python.programmer_set.all()
Out[21]: <QuerySet [<Programmer: Ariel>, <Programmer: Evelyn>]>

In [22]: exit()
[lin777@Evelyn-Arch modelvideo]$ python manage.py makemigrations
You are trying to add a non-nullable field 'date_created' to company without a default; we can't do that (the database needs something to populate existing rows).
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit, and let me add a default in models.py
Select an option: 1
Please enter the default value now, as valid Python
The datetime and django.utils.timezone modules are available, so you can do e.g. timezone.now
Type 'exit' to exit this prompt
>>> exit
[lin777@Evelyn-Arch modelvideo]$ python manage.py makemigrations
You are trying to add a non-nullable field 'date_created' to company without a default; we can't do that (the database needs something to populate existing rows).
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit, and let me add a default in models.py
Select an option: 1
Please enter the default value now, as valid Python
The datetime and django.utils.timezone modules are available, so you can do e.g. timezone.now
Type 'exit' to exit this prompt
>>> from django.utils import timezone
Invalid input: invalid syntax (<string>, line 1)
>>> timezone.now
You are trying to add a non-nullable field 'location' to company without a default; we can't do that (the database needs something to populate existing rows).
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit, and let me add a default in models.py
Select an option: 1
Please enter the default value now, as valid Python
The datetime and django.utils.timezone modules are available, so you can do e.g. timezone.now
Type 'exit' to exit this prompt
>>> null
Invalid input: name 'null' is not defined
>>> timezone.now
You are trying to add a non-nullable field 'creator' to language without a default; we can't do that (the database needs something to populate existing rows).
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit, and let me add a default in models.py
Select an option: 1
Please enter the default value now, as valid Python
The datetime and django.utils.timezone modules are available, so you can do e.g. timezone.now
Type 'exit' to exit this prompt
>>> timezone.now
You are trying to add a non-nullable field 'date_created' to language without a default; we can't do that (the database needs something to populate existing rows).
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit, and let me add a default in models.py
Select an option: 1
Please enter the default value now, as valid Python
The datetime and django.utils.timezone modules are available, so you can do e.g. timezone.now
Type 'exit' to exit this prompt
>>> exit
[lin777@Evelyn-Arch modelvideo]$ python manage.py makemigrations
You are trying to add a non-nullable field 'date_created' to company without a default; we can't do that (the database needs something to populate existing rows).
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit, and let me add a default in models.py
Select an option: 2
[lin777@Evelyn-Arch modelvideo]$ python manage.py makemigrations
System check identified some issues:

WARNINGS:
example.Company.date_created: (fields.W161) Fixed default value provided.
        HINT: It seems you set a fixed date / time / datetime value as default for this field. This may not be what you want. If you want to have the current date as default, use `django.utils.timezone.now`
You are trying to add a non-nullable field 'location' to company without a default; we can't do that (the database needs something to populate existing rows).
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit, and let me add a default in models.py
Select an option: ^[[A
Please select a valid option: 2
[lin777@Evelyn-Arch modelvideo]$ python manage.py makemigrations
System check identified some issues:

WARNINGS:
example.Company.date_created: (fields.W161) Fixed default value provided.
        HINT: It seems you set a fixed date / time / datetime value as default for this field. This may not be what you want. If you want to have the current date as default, use `django.utils.timezone.now`
You are trying to add a non-nullable field 'location' to company without a default; we can't do that (the database needs something to populate existing rows).
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit, and let me add a default in models.py
Select an option: ^[[A^[[A^[[A2
Please select a valid option: 2
[lin777@Evelyn-Arch modelvideo]$ python manage.py makemigrations
You are trying to add a non-nullable field 'location' to company without a default; we can't do that (the database needs something to populate existing rows).
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit, and let me add a default in models.py
Select an option: ^[[A
Please select a valid option: 2
[lin777@Evelyn-Arch modelvideo]$ python manage.py makemigrations
Migrations for 'example':
  example/migrations/0004_auto_20180412_1752.py
    - Add field date_created to company
    - Add field location to company
    - Add field creator to language
    - Add field date_created to language
    - Add field paradigm to language
    - Add field age to programmer
[lin777@Evelyn-Arch modelvideo]$ python manage.py migrate       
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, example, sessions
Running migrations:
  Applying example.0004_auto_20180412_1752... OK
[lin777@Evelyn-Arch modelvideo]$ python manage.py shell         
Python 3.6.2 (default, Jul 20 2017, 03:52:27) 
Type 'copyright', 'credits' or 'license' for more information
IPython 6.1.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: from query.models import Language, Programmer, Company
---------------------------------------------------------------------------
ModuleNotFoundError                       Traceback (most recent call last)
<ipython-input-1-1ddf81acb422> in <module>()
----> 1 from query.models import Language, Programmer, Company

ModuleNotFoundError: No module named 'query'

In [2]: from example.models import Language, Programmer, Company

In [3]: Company.objects.all(
   ...: )
Out[3]: <QuerySet [<Company: Microsoft>, <Company: miPusheen>, <Company: APPLE>]>

In [4]: Language.objects.all()
Out[4]: <QuerySet [<Language: Python>, <Language: Java>, <Language: Ruby>, <Language: Kotlin>]>

In [5]: languages = Language.objects.all()

In [6]: languages
Out[6]: <QuerySet [<Language: Python>, <Language: Java>, <Language: Ruby>, <Language: Kotlin>]>

In [7]: languages[0]
Out[7]: <Language: Python>

In [8]: languages[2]
Out[8]: <Language: Ruby>

In [9]: languages[2].name
Out[9]: 'Ruby'

In [10]: Language.objects.filter(name_exact='Java')
---------------------------------------------------------------------------
FieldError                                Traceback (most recent call last)
<ipython-input-10-a0bfa62e24d3> in <module>()
----> 1 Language.objects.filter(name_exact='Java')

/usr/lib/python3.6/site-packages/django/db/models/manager.py in manager_method(self, *args, **kwargs)
     80         def create_method(name, method):
     81             def manager_method(self, *args, **kwargs):
---> 82                 return getattr(self.get_queryset(), name)(*args, **kwargs)
     83             manager_method.__name__ = method.__name__
     84             manager_method.__doc__ = method.__doc__

/usr/lib/python3.6/site-packages/django/db/models/query.py in filter(self, *args, **kwargs)                                                               
    834         set.
    835         """
--> 836         return self._filter_or_exclude(False, *args, **kwargs)
    837 
    838     def exclude(self, *args, **kwargs):

/usr/lib/python3.6/site-packages/django/db/models/query.py in _filter_or_exclude(self, negate, *args, **kwargs)
    852             clone.query.add_q(~Q(*args, **kwargs))
    853         else:
--> 854             clone.query.add_q(Q(*args, **kwargs))
    855         return clone
    856 

/usr/lib/python3.6/site-packages/django/db/models/sql/query.py in add_q(self, q_object)                                                                   
   1251         # So, demotion is OK.
   1252         existing_inner = {a for a in self.alias_map if self.alias_map[a].join_type == INNER}                                                      
-> 1253         clause, _ = self._add_q(q_object, self.used_aliases)
   1254         if clause:
   1255             self.where.add(clause, AND)

/usr/lib/python3.6/site-packages/django/db/models/sql/query.py in _add_q(self, q_object, used_aliases, branch_negated, current_negated, allow_joins, split_subq)                                                                       
   1275                     child, can_reuse=used_aliases, branch_negated=branch_negated,
   1276                     current_negated=current_negated, allow_joins=allow_joins,
-> 1277                     split_subq=split_subq,
   1278                 )
   1279                 joinpromoter.add_votes(needed_inner)

/usr/lib/python3.6/site-packages/django/db/models/sql/query.py in build_filter(self, filter_expr, branch_negated, current_negated, can_reuse, allow_joins, split_subq, reuse_with_filtered_relation)                                   
   1151         if not arg:
   1152             raise FieldError("Cannot parse keyword query %r" % arg)
-> 1153         lookups, parts, reffed_expression = self.solve_lookup_type(arg)
   1154 
   1155         if not getattr(reffed_expression, 'filterable', True):

/usr/lib/python3.6/site-packages/django/db/models/sql/query.py in solve_lookup_type(self, lookup)
   1013             if expression:
   1014                 return expression_lookups, (), expression
-> 1015         _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
   1016         field_parts = lookup_splitted[0:len(lookup_splitted) - len(lookup_parts)]
   1017         if len(lookup_parts) > 1 and not field_parts:

/usr/lib/python3.6/site-packages/django/db/models/sql/query.py in names_to_path(self, names, opts, allow_many, fail_on_missing)
   1377                     )
   1378                     raise FieldError("Cannot resolve keyword '%s' into field. "
-> 1379                                      "Choices are: %s" % (name, ", ".join(available)))                                                            
   1380                 break
   1381             # Check if we need any joins for concrete inheritance cases (the                                                                      

FieldError: Cannot resolve keyword 'name_exact' into field. Choices are: creator, date_created, id, name, paradigm, programmer

In [11]: Language.objects.filter(name__exact='Java')
Out[11]: <QuerySet [<Language: Java>]>

In [12]: Language.objects.filter(name__exact='Python')
Out[12]: <QuerySet [<Language: Python>]>

In [13]: Language.objects.filter(name__exact='python')
Out[13]: <QuerySet []>

In [14]: Language.objects.filter(name__iexact='python')
Out[14]: <QuerySet [<Language: Python>]>

In [15]: Language.objects.exclude(name__exact='Python')
Out[15]: <QuerySet [<Language: Java>, <Language: Ruby>, <Language: Kotlin>]>

In [16]: Language.objects.filter(name__iexact='python').filter(location__exac
    ...: t='USA')
---------------------------------------------------------------------------
FieldError                                Traceback (most recent call last)
<ipython-input-16-e13b7b9ee752> in <module>()
----> 1 Language.objects.filter(name__iexact='python').filter(location__exact='USA')                                                                      

/usr/lib/python3.6/site-packages/django/db/models/query.py in filter(self, *args, **kwargs)                                                               
    834         set.
    835         """
--> 836         return self._filter_or_exclude(False, *args, **kwargs)
    837 
    838     def exclude(self, *args, **kwargs):

/usr/lib/python3.6/site-packages/django/db/models/query.py in _filter_or_exclude(self, negate, *args, **kwargs)
    852             clone.query.add_q(~Q(*args, **kwargs))
    853         else:
--> 854             clone.query.add_q(Q(*args, **kwargs))
    855         return clone
    856 

/usr/lib/python3.6/site-packages/django/db/models/sql/query.py in add_q(self, q_object)                                                                   
   1251         # So, demotion is OK.
   1252         existing_inner = {a for a in self.alias_map if self.alias_map[a].join_type == INNER}                                                      
-> 1253         clause, _ = self._add_q(q_object, self.used_aliases)
   1254         if clause:
   1255             self.where.add(clause, AND)

/usr/lib/python3.6/site-packages/django/db/models/sql/query.py in _add_q(self, q_object, used_aliases, branch_negated, current_negated, allow_joins, split_subq)                                                                       
   1275                     child, can_reuse=used_aliases, branch_negated=branch_negated,
   1276                     current_negated=current_negated, allow_joins=allow_joins,
-> 1277                     split_subq=split_subq,
   1278                 )
   1279                 joinpromoter.add_votes(needed_inner)

/usr/lib/python3.6/site-packages/django/db/models/sql/query.py in build_filter(self, filter_expr, branch_negated, current_negated, can_reuse, allow_joins, split_subq, reuse_with_filtered_relation)                                   
   1151         if not arg:
   1152             raise FieldError("Cannot parse keyword query %r" % arg)
-> 1153         lookups, parts, reffed_expression = self.solve_lookup_type(arg)
   1154 
   1155         if not getattr(reffed_expression, 'filterable', True):

/usr/lib/python3.6/site-packages/django/db/models/sql/query.py in solve_lookup_type(self, lookup)
   1013             if expression:
   1014                 return expression_lookups, (), expression
-> 1015         _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
   1016         field_parts = lookup_splitted[0:len(lookup_splitted) - len(lookup_parts)]
   1017         if len(lookup_parts) > 1 and not field_parts:

/usr/lib/python3.6/site-packages/django/db/models/sql/query.py in names_to_path(self, names, opts, allow_many, fail_on_missing)
   1377                     )
   1378                     raise FieldError("Cannot resolve keyword '%s' into field. "
-> 1379                                      "Choices are: %s" % (name, ", ".join(available)))                                                            
   1380                 break
   1381             # Check if we need any joins for concrete inheritance cases (the                                                                      

FieldError: Cannot resolve keyword 'location' into field. Choices are: creator, date_created, id, name, paradigm, programmer

In [17]: Language.objects.filter(name__exact='Python').filter(location__exact
    ...: ='USA')
---------------------------------------------------------------------------
FieldError                                Traceback (most recent call last)
<ipython-input-17-19f5f0042ed7> in <module>()
----> 1 Language.objects.filter(name__exact='Python').filter(location__exact='USA')                                                                       

/usr/lib/python3.6/site-packages/django/db/models/query.py in filter(self, *args, **kwargs)                                                               
    834         set.
    835         """
--> 836         return self._filter_or_exclude(False, *args, **kwargs)
    837 
    838     def exclude(self, *args, **kwargs):

/usr/lib/python3.6/site-packages/django/db/models/query.py in _filter_or_exclude(self, negate, *args, **kwargs)
    852             clone.query.add_q(~Q(*args, **kwargs))
    853         else:
--> 854             clone.query.add_q(Q(*args, **kwargs))
    855         return clone
    856 

/usr/lib/python3.6/site-packages/django/db/models/sql/query.py in add_q(self, q_object)                                                                   
   1251         # So, demotion is OK.
   1252         existing_inner = {a for a in self.alias_map if self.alias_map[a].join_type == INNER}                                                      
-> 1253         clause, _ = self._add_q(q_object, self.used_aliases)
   1254         if clause:
   1255             self.where.add(clause, AND)

/usr/lib/python3.6/site-packages/django/db/models/sql/query.py in _add_q(self, q_object, used_aliases, branch_negated, current_negated, allow_joins, split_subq)                                                                       
   1275                     child, can_reuse=used_aliases, branch_negated=branch_negated,
   1276                     current_negated=current_negated, allow_joins=allow_joins,
-> 1277                     split_subq=split_subq,
   1278                 )
   1279                 joinpromoter.add_votes(needed_inner)

/usr/lib/python3.6/site-packages/django/db/models/sql/query.py in build_filter(self, filter_expr, branch_negated, current_negated, can_reuse, allow_joins, split_subq, reuse_with_filtered_relation)                                   
   1151         if not arg:
   1152             raise FieldError("Cannot parse keyword query %r" % arg)
-> 1153         lookups, parts, reffed_expression = self.solve_lookup_type(arg)
   1154 
   1155         if not getattr(reffed_expression, 'filterable', True):

/usr/lib/python3.6/site-packages/django/db/models/sql/query.py in solve_lookup_type(self, lookup)
   1013             if expression:
   1014                 return expression_lookups, (), expression
-> 1015         _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
   1016         field_parts = lookup_splitted[0:len(lookup_splitted) - len(lookup_parts)]
   1017         if len(lookup_parts) > 1 and not field_parts:

/usr/lib/python3.6/site-packages/django/db/models/sql/query.py in names_to_path(self, names, opts, allow_many, fail_on_missing)
   1377                     )
   1378                     raise FieldError("Cannot resolve keyword '%s' into field. "
-> 1379                                      "Choices are: %s" % (name, ", ".join(available)))                                                            
   1380                 break
   1381             # Check if we need any joins for concrete inheritance cases (the                                                                      

FieldError: Cannot resolve keyword 'location' into field. Choices are: creator, date_created, id, name, paradigm, programmer

In [18]: Language.objects.filter(name__exact='Python').filter(creator__exact=
    ...: 'NaN')
Out[18]: <QuerySet [<Language: Python>]>

In [19]: Language.objects.filter(name__exact='Python').filter(creator__exact=
    ...: 'NN')
Out[19]: <QuerySet []>

In [20]: ariel.age = 25
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-20-e9c337384c57> in <module>()
----> 1 ariel.age = 25

NameError: name 'ariel' is not defined

In [21]: ariel = Programmer.objects.get(pk=1)

In [22]: evelyn = Programmer.objects.get(pk=2)

In [23]: ariel.age = 25

In [24]: ariel.save()

In [25]: evelyn.age = 20

In [26]: evelyn.save()

In [27]: Programmer.objects.filter(age__gt=23)
Out[27]: <QuerySet [<Programmer: Ariel>]>

In [28]: Programmer.objects.filter(age__gt=22)
Out[28]: <QuerySet [<Programmer: Sergio>, <Programmer: Anghy>, <Programmer: Jorge>, <Programmer: Jhonathan>, <Programmer: Ariel>]>

In [29]: Programmer.objects.filter(age__gte=23)
Out[29]: <QuerySet [<Programmer: Sergio>, <Programmer: Anghy>, <Programmer: Jorge>, <Programmer: Jhonathan>, <Programmer: Ariel>]>

In [30]: Programmer.objects.filter(age__lt=23)
Out[30]: <QuerySet [<Programmer: Evelyn>]>

In [31]: Programmer.objects.filter(age__lte=23)
Out[31]: <QuerySet [<Programmer: Sergio>, <Programmer: Anghy>, <Programmer: Jorge>, <Programmer: Jhonathan>, <Programmer: Evelyn>]>

In [32]: Language.objects.exclude(name__contains='ar')
Out[32]: <QuerySet [<Language: Python>, <Language: Java>, <Language: Ruby>, <Language: Kotlin>]>

In [33]: Programmer.objects.filter(name__contains='ar')
Out[33]: <QuerySet []>

In [34]: Programmer.objects.filter(name__contains='Ar')
Out[34]: <QuerySet [<Programmer: Ariel>]>

In [35]: Programmer.objects.filter(name__contains='ly')
Out[35]: <QuerySet [<Programmer: Evelyn>]>

In [36]: Programmer.objects.filter(name__contains='e')
Out[36]: <QuerySet [<Programmer: Sergio>, <Programmer: Jorge>, <Programmer: Ariel>, <Programmer: Evelyn>]>

In [37]: Programmer.objects.filter(name__icontains='e')
Out[37]: <QuerySet [<Programmer: Sergio>, <Programmer: Jorge>, <Programmer: Ariel>, <Programmer: Evelyn>]>

In [38]: Programmer.objects.filter(name__icontains='ar')
Out[38]: <QuerySet [<Programmer: Ariel>]>

In [39]: Programmer.objects.filter(name__in=['Ariel', 'Evelyn'])
Out[39]: <QuerySet [<Programmer: Ariel>, <Programmer: Evelyn>]>

In [40]: Programmer.objects.exclude(name__in=['Ariel', 'Evelyn'])
Out[40]: <QuerySet [<Programmer: Sergio>, <Programmer: Anghy>, <Programmer: Jorge>, <Programmer: Jhonathan>]>

In [41]: Programmer.objects.filter(name__startswith='J')
Out[41]: <QuerySet [<Programmer: Jorge>, <Programmer: Jhonathan>]>

In [42]: Programmer.objects.filter(name__startswith='j')
Out[42]: <QuerySet []>

In [43]: Programmer.objects.filter(name__istartswith='j')
Out[43]: <QuerySet [<Programmer: Jorge>, <Programmer: Jhonathan>]>

In [44]: Programmer.objects.filter(name__endswith='n')
Out[44]: <QuerySet [<Programmer: Jhonathan>, <Programmer: Evelyn>]>

In [45]: Programmer.objects.exclude(name__endswith='n')
Out[45]: <QuerySet [<Programmer: Sergio>, <Programmer: Anghy>, <Programmer: Jorge>, <Programmer: Ariel>]>

In [46]: Programmer.objects.filter(age__isnull=True)
Out[46]: <QuerySet []>

In [47]: Programmer.objects.filter(age__isnull=False)
Out[47]: <QuerySet [<Programmer: Sergio>, <Programmer: Anghy>, <Programmer: Jorge>, <Programmer: Jhonathan>, <Programmer: Ariel>, <Programmer: Evelyn>]>

In [48]: Programmer.objects.count()
Out[48]: 6

In [49]: Programmer.objects.filter(name__endswith='n').count()
Out[49]: 2

In [50]: Programmer.objects.exclude(name__endswith='n').count()
Out[50]: 4

In [51]: ariel.company
Out[51]: <Company: APPLE>

In [52]: ariel[0].company
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-52-814ba9ab2994> in <module>()
----> 1 ariel[0].company

TypeError: 'Programmer' object does not support indexing

In [53]: ariel = Programmer.objects.filter(name__exact='Ariel")
  File "<ipython-input-53-6949717dc3c5>", line 1
    ariel = Programmer.objects.filter(name__exact='Ariel")
                                                          ^
SyntaxError: EOL while scanning string literal


In [54]: ariel = Programmer.objects.filter(name__exact='Ariel')

In [55]: ariel.company
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-55-2d6bfe2cc528> in <module>()
----> 1 ariel.company

AttributeError: 'QuerySet' object has no attribute 'company'

In [56]: ariel[0].company
Out[56]: <Company: APPLE>

In [57]: ariel = Programmer.objects.filter(name__exact='Ariel').get

In [58]: ariel.company
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-58-2d6bfe2cc528> in <module>()
----> 1 ariel.company

AttributeError: 'function' object has no attribute 'company'

In [59]: ariel = Programmer.objects.filter(name__exact='Ariel').get()

In [60]: ariel.company
Out[60]: <Company: APPLE>

In [61]: # .get() usarlo solo para cuando se obtiene un solo objeto

In [62]: Programmer.objects.all()
Out[62]: <QuerySet [<Programmer: Sergio>, <Programmer: Anghy>, <Programmer: Jorge>, <Programmer: Jhonathan>, <Programmer: Ariel>, <Programmer: Evelyn>]>

In [63]: Programmer.objects.all()[:2]
Out[63]: <QuerySet [<Programmer: Sergio>, <Programmer: Anghy>]>

In [64]: Programmer.objects.all()[1:3]
Out[64]: <QuerySet [<Programmer: Anghy>, <Programmer: Jorge>]>

In [65]: Company.objects.filter(date_created__gt='2000-01-01')
Out[65]: <QuerySet [<Company: Microsoft>, <Company: miPusheen>, <Company: APPLE>]>

In [66]: Company.objects.filter(date_created__lt='2000-01-01')
Out[66]: <QuerySet []>

In [67]: Programmer.objects.all().order_by('name')
Out[67]: <QuerySet [<Programmer: Anghy>, <Programmer: Ariel>, <Programmer: Evelyn>, <Programmer: Jhonathan>, <Programmer: Jorge>, <Programmer: Sergio>]>

In [68]: Programmer.objects.all().order_by('-name')
Out[68]: <QuerySet [<Programmer: Sergio>, <Programmer: Jorge>, <Programmer: Jhonathan>, <Programmer: Evelyn>, <Programmer: Ariel>, <Programmer: Anghy>]>

In [69]: Programmer.objects.all().order_by('age')
Out[69]: <QuerySet [<Programmer: Evelyn>, <Programmer: Sergio>, <Programmer: Anghy>, <Programmer: Jorge>, <Programmer: Jhonathan>, <Programmer: Ariel>]>

In [70]: Programmer.objects.all().order_by('-age')
Out[70]: <QuerySet [<Programmer: Ariel>, <Programmer: Sergio>, <Programmer: Anghy>, <Programmer: Jorge>, <Programmer: Jhonathan>, <Programmer: Evelyn>]>

In [71]: mipusheen = Company.objects.get(pk=1)

In [72]: mipusheen.date_created = '2017-12-31'

In [73]: mipusheen.save()

In [74]: Company.objects.all().order_by('date_created')
Out[74]: <QuerySet [<Company: Microsoft>, <Company: APPLE>, <Company: miPusheen>]>

In [75]: Company.objects.all().order_by('-date_created')
Out[75]: <QuerySet [<Company: Microsoft>, <Company: APPLE>, <Company: miPusheen>]>

In [76]: ariel = Programmer.objects.filter(name__exact="Ariel").get()

In [77]: ariel.language_set.all()
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-77-3fba8037703f> in <module>()
----> 1 ariel.language_set.all()

AttributeError: 'Programmer' object has no attribute 'language_set'

In [78]: ariel.languages.all()
Out[78]: <QuerySet [<Language: Java>, <Language: Kotlin>, <Language: Python>]>

In [79]: python = Language.objects.filter(name__exact="Python").get()

In [80]: python.programmer_set.all()
Out[80]: <QuerySet [<Programmer: Evelyn>, <Programmer: Ariel>]>

In [81]: 
